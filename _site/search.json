[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#github-repository",
    "href": "posts/Environmental Machine Learning Project/index.html#github-repository",
    "title": "Environmental Data Project",
    "section": "GitHub Repository",
    "text": "GitHub Repository\nHere’s a link to the GitHub repo"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#dataset",
    "href": "posts/Environmental Machine Learning Project/index.html#dataset",
    "title": "Environmental Data Project",
    "section": "Dataset",
    "text": "Dataset\nBefore choosing a specific topic, I did data exploration for various datasets to see which would be the most interesting. I looked at: - US Census https://github.com/zykls/folktablesLinks - Covid19 - https://www.kaggle.com/imdevskp/covid-19-analysis-visualization-comparisons/dataLink - Uber: https://www.kaggle.com/datasets/yasserh/uber-fares-dataset - NYC: https://data.cityofnewyork.us/browse?category=Transportation"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#environmental-data-analysis",
    "href": "posts/Environmental Machine Learning Project/index.html#environmental-data-analysis",
    "title": "Environmental Data Project",
    "section": "Environmental Data Analysis",
    "text": "Environmental Data Analysis\n\n“How have land use, air quality, disasters, and climate variables changed over time? What factors are related to this?”\nCreated an account with Public EM-DAT to access a global database on natural and technological disasters\n\nConfigured parameters to obtain custom dataset\n\n\n\nimport pandas as pd\n\ndf = pd.read_excel(\"emdat.xlsx\", engine=\"openpyxl\")  \n\nprint(df.head())\n\n          DisNo. Historic Classification Key Disaster Group Disaster Subgroup  \\\n0  1999-9388-DJI       No    nat-cli-dro-dro        Natural    Climatological   \n1  1999-9388-SDN       No    nat-cli-dro-dro        Natural    Climatological   \n2  1999-9388-SOM       No    nat-cli-dro-dro        Natural    Climatological   \n3  2000-0001-AGO       No    tec-tra-roa-roa  Technological         Transport   \n4  2000-0002-AGO       No    nat-hyd-flo-riv        Natural      Hydrological   \n\n  Disaster Type Disaster Subtype External IDs Event Name  ISO  ...  \\\n0       Drought          Drought          NaN        NaN  DJI  ...   \n1       Drought          Drought          NaN        NaN  SDN  ...   \n2       Drought          Drought          NaN        NaN  SOM  ...   \n3          Road             Road          NaN        NaN  AGO  ...   \n4         Flood   Riverine flood          NaN        NaN  AGO  ...   \n\n  Reconstruction Costs ('000 US$) Reconstruction Costs, Adjusted ('000 US$)  \\\n0                             NaN                                       NaN   \n1                             NaN                                       NaN   \n2                             NaN                                       NaN   \n3                             NaN                                       NaN   \n4                             NaN                                       NaN   \n\n  Insured Damage ('000 US$) Insured Damage, Adjusted ('000 US$)  \\\n0                       NaN                                 NaN   \n1                       NaN                                 NaN   \n2                       NaN                                 NaN   \n3                       NaN                                 NaN   \n4                       NaN                                 NaN   \n\n  Total Damage ('000 US$) Total Damage, Adjusted ('000 US$)        CPI  \\\n0                     NaN                               NaN  58.111474   \n1                     NaN                               NaN  56.514291   \n2                     NaN                               NaN  56.514291   \n3                     NaN                               NaN  56.514291   \n4                 10000.0                           17695.0  56.514291   \n\n                                         Admin Units  Entry Date  Last Update  \n0  [{\"adm1_code\":1093,\"adm1_name\":\"Ali Sabieh\"},{...  2006-03-01   2023-09-25  \n1  [{\"adm1_code\":2757,\"adm1_name\":\"Northern Darfu...  2006-03-08   2023-09-25  \n2  [{\"adm1_code\":2691,\"adm1_name\":\"Bay\"},{\"adm1_c...  2006-03-08   2023-09-25  \n3                                                NaN  2004-10-27   2023-09-25  \n4  [{\"adm2_code\":4214,\"adm2_name\":\"Baia Farta\"},{...  2005-02-03   2023-09-25  \n\n[5 rows x 46 columns]\n\n\nLet’s inspect the data\n\ndf.info()\ndf.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16209 entries, 0 to 16208\nData columns (total 46 columns):\n #   Column                                     Non-Null Count  Dtype  \n---  ------                                     --------------  -----  \n 0   DisNo.                                     16209 non-null  object \n 1   Historic                                   16209 non-null  object \n 2   Classification Key                         16209 non-null  object \n 3   Disaster Group                             16209 non-null  object \n 4   Disaster Subgroup                          16209 non-null  object \n 5   Disaster Type                              16209 non-null  object \n 6   Disaster Subtype                           16209 non-null  object \n 7   External IDs                               2709 non-null   object \n 8   Event Name                                 5105 non-null   object \n 9   ISO                                        16209 non-null  object \n 10  Country                                    16209 non-null  object \n 11  Subregion                                  16209 non-null  object \n 12  Region                                     16209 non-null  object \n 13  Location                                   15499 non-null  object \n 14  Origin                                     4076 non-null   object \n 15  Associated Types                           3438 non-null   object \n 16  OFDA/BHA Response                          16209 non-null  object \n 17  Appeal                                     16209 non-null  object \n 18  Declaration                                16209 non-null  object \n 19  AID Contribution ('000 US$)                489 non-null    float64\n 20  Magnitude                                  3311 non-null   float64\n 21  Magnitude Scale                            10137 non-null  object \n 22  Latitude                                   1816 non-null   float64\n 23  Longitude                                  1816 non-null   float64\n 24  River Basin                                1233 non-null   object \n 25  Start Year                                 16209 non-null  int64  \n 26  Start Month                                16140 non-null  float64\n 27  Start Day                                  14638 non-null  float64\n 28  End Year                                   16209 non-null  int64  \n 29  End Month                                  16046 non-null  float64\n 30  End Day                                    14710 non-null  float64\n 31  Total Deaths                               13039 non-null  float64\n 32  No. Injured                                6019 non-null   float64\n 33  No. Affected                               7503 non-null   float64\n 34  No. Homeless                               1333 non-null   float64\n 35  Total Affected                             12087 non-null  float64\n 36  Reconstruction Costs ('000 US$)            33 non-null     float64\n 37  Reconstruction Costs, Adjusted ('000 US$)  33 non-null     float64\n 38  Insured Damage ('000 US$)                  713 non-null    float64\n 39  Insured Damage, Adjusted ('000 US$)        694 non-null    float64\n 40  Total Damage ('000 US$)                    3237 non-null   float64\n 41  Total Damage, Adjusted ('000 US$)          3110 non-null   float64\n 42  CPI                                        15527 non-null  float64\n 43  Admin Units                                8416 non-null   object \n 44  Entry Date                                 16209 non-null  object \n 45  Last Update                                16209 non-null  object \ndtypes: float64(20), int64(2), object(24)\nmemory usage: 5.7+ MB\n\n\n\n\n\n\n\n\n\nAID Contribution ('000 US$)\nMagnitude\nLatitude\nLongitude\nStart Year\nStart Month\nStart Day\nEnd Year\nEnd Month\nEnd Day\n...\nNo. Affected\nNo. Homeless\nTotal Affected\nReconstruction Costs ('000 US$)\nReconstruction Costs, Adjusted ('000 US$)\nInsured Damage ('000 US$)\nInsured Damage, Adjusted ('000 US$)\nTotal Damage ('000 US$)\nTotal Damage, Adjusted ('000 US$)\nCPI\n\n\n\n\ncount\n4.890000e+02\n3.311000e+03\n1816.000000\n1816.000000\n16209.000000\n16140.000000\n14638.000000\n16209.000000\n16046.000000\n14710.000000\n...\n7.503000e+03\n1.333000e+03\n1.208700e+04\n3.300000e+01\n3.300000e+01\n7.130000e+02\n6.940000e+02\n3.237000e+03\n3.110000e+03\n15527.000000\n\n\nmean\n2.855916e+04\n6.122545e+04\n16.415862\n42.477620\n2011.109816\n6.463755\n15.352849\n2011.141156\n6.592858\n15.814276\n...\n6.280205e+05\n3.162704e+04\n3.939913e+05\n5.687264e+06\n6.357118e+06\n1.347736e+06\n1.699765e+06\n1.178820e+06\n1.478426e+06\n72.858610\n\n\nstd\n2.118956e+05\n7.486415e+05\n21.786044\n75.523526\n7.422845\n3.413559\n8.973253\n7.425922\n3.391621\n8.891107\n...\n6.649927e+06\n2.143536e+05\n5.249462e+06\n1.745232e+07\n1.760343e+07\n4.644761e+06\n5.954430e+06\n6.317104e+06\n8.316465e+06\n11.582942\n\n\nmin\n3.000000e+00\n-5.700000e+01\n-72.640000\n-172.095000\n2000.000000\n1.000000\n1.000000\n2000.000000\n1.000000\n1.000000\n...\n1.000000e+00\n3.000000e+00\n1.000000e+00\n8.400000e+01\n1.310000e+02\n3.400000e+01\n4.800000e+01\n2.000000e+00\n3.000000e+00\n56.514291\n\n\n25%\n1.660000e+02\n2.350000e+01\n1.061500\n1.676500\n2005.000000\n4.000000\n7.000000\n2005.000000\n4.000000\n8.000000\n...\n6.000000e+02\n3.400000e+02\n4.200000e+01\n1.000000e+05\n1.000000e+05\n7.500000e+04\n9.917050e+04\n1.600000e+04\n2.132325e+04\n61.989586\n\n\n50%\n7.650000e+02\n2.000000e+02\n18.642500\n55.574500\n2010.000000\n7.000000\n15.000000\n2010.000000\n7.000000\n16.000000\n...\n6.500000e+03\n1.966000e+03\n1.000000e+03\n5.650000e+05\n7.023360e+05\n2.500000e+05\n3.491245e+05\n1.000000e+05\n1.420280e+05\n71.563596\n\n\n75%\n4.984000e+03\n2.173700e+04\n34.786750\n103.235250\n2018.000000\n9.000000\n23.000000\n2018.000000\n9.000000\n24.000000\n...\n6.003500e+04\n7.000000e+03\n1.757050e+04\n3.344000e+06\n4.245383e+06\n8.000000e+05\n1.117445e+06\n5.500000e+05\n7.172402e+05\n80.445779\n\n\nmax\n3.518530e+06\n4.000000e+07\n67.930000\n179.650000\n2025.000000\n12.000000\n31.000000\n2025.000000\n12.000000\n31.000000\n...\n3.300000e+08\n5.000000e+06\n3.300000e+08\n1.000000e+08\n1.000000e+08\n6.000000e+07\n9.361435e+07\n2.100000e+08\n2.844652e+08\n100.000000\n\n\n\n\n8 rows × 22 columns"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#data-cleaning",
    "href": "posts/Environmental Machine Learning Project/index.html#data-cleaning",
    "title": "Environmental Data Project",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nGet rid of columns where the data is irrelevant or there’s not enough of it for it to be interesting.\n\ndf.isna().sum().sort_values(ascending=False)\n\nReconstruction Costs, Adjusted ('000 US$)    16176\nReconstruction Costs ('000 US$)              16176\nAID Contribution ('000 US$)                  15720\nInsured Damage, Adjusted ('000 US$)          15515\nInsured Damage ('000 US$)                    15496\nRiver Basin                                  14976\nNo. Homeless                                 14876\nLongitude                                    14393\nLatitude                                     14393\nExternal IDs                                 13500\nTotal Damage, Adjusted ('000 US$)            13099\nTotal Damage ('000 US$)                      12972\nMagnitude                                    12898\nAssociated Types                             12771\nOrigin                                       12133\nEvent Name                                   11104\nNo. Injured                                  10190\nNo. Affected                                  8706\nAdmin Units                                   7793\nMagnitude Scale                               6072\nTotal Affected                                4122\nTotal Deaths                                  3170\nStart Day                                     1571\nEnd Day                                       1499\nLocation                                       710\nCPI                                            682\nEnd Month                                      163\nStart Month                                     69\nEntry Date                                       0\nDisNo.                                           0\nEnd Year                                         0\nStart Year                                       0\nHistoric                                         0\nDeclaration                                      0\nAppeal                                           0\nOFDA/BHA Response                                0\nRegion                                           0\nSubregion                                        0\nCountry                                          0\nISO                                              0\nDisaster Subtype                                 0\nDisaster Type                                    0\nDisaster Subgroup                                0\nDisaster Group                                   0\nClassification Key                               0\nLast Update                                      0\ndtype: int64\n\n\n\ndf = df.drop(columns=[ 'DisNo.', 'External IDs','Event Name', 'Origin','Associated Types','Appeal','Declaration','OFDA/BHA Response','AID Contribution (\\'000 US$)',  'Reconstruction Costs (\\'000 US$)','Reconstruction Costs, Adjusted (\\'000 US$)','Insured Damage (\\'000 US$)','Insured Damage, Adjusted (\\'000 US$)','River Basin','Admin Units','Entry Date','Last Update'   ], errors='ignore')\ndf\n\n\n\n\n\n\n\n\nHistoric\nClassification Key\nDisaster Group\nDisaster Subgroup\nDisaster Type\nDisaster Subtype\nISO\nCountry\nSubregion\nRegion\n...\nEnd Month\nEnd Day\nTotal Deaths\nNo. Injured\nNo. Affected\nNo. Homeless\nTotal Affected\nTotal Damage ('000 US$)\nTotal Damage, Adjusted ('000 US$)\nCPI\n\n\n\n\n0\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nDJI\nDjibouti\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n100000.0\nNaN\n100000.0\nNaN\nNaN\n58.111474\n\n\n1\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSDN\nSudan\nNorthern Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n2000000.0\nNaN\n2000000.0\nNaN\nNaN\n56.514291\n\n\n2\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSOM\nSomalia\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\n21.0\nNaN\n1200000.0\nNaN\n1200000.0\nNaN\nNaN\n56.514291\n\n\n3\nNo\ntec-tra-roa-roa\nTechnological\nTransport\nRoad\nRoad\nAGO\nAngola\nSub-Saharan Africa\nAfrica\n...\n1.0\n26.0\n14.0\n11.0\nNaN\nNaN\n11.0\nNaN\nNaN\n56.514291\n\n\n4\nNo\nnat-hyd-flo-riv\nNatural\nHydrological\nFlood\nRiverine flood\nAGO\nAngola\nSub-Saharan Africa\nAfrica\n...\n1.0\n15.0\n31.0\nNaN\n70000.0\nNaN\n70000.0\n10000.0\n17695.0\n56.514291\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16204\nNo\ntec-tra-roa-roa\nTechnological\nTransport\nRoad\nRoad\nBRA\nBrazil\nLatin America and the Caribbean\nAmericas\n...\n4.0\n8.0\n10.0\n18.0\nNaN\nNaN\n18.0\nNaN\nNaN\nNaN\n\n\n16205\nNo\ntec-mis-fir-fir\nTechnological\nMiscellaneous accident\nFire (Miscellaneous)\nFire (Miscellaneous)\nCHN\nChina\nEastern Asia\nAsia\n...\n4.0\n8.0\n20.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n16206\nNo\nnat-met-sto-san\nNatural\nMeteorological\nStorm\nSand/Dust storm\nIRQ\nIraq\nWestern Asia\nAsia\n...\n4.0\n14.0\nNaN\n2751.0\nNaN\nNaN\n2751.0\nNaN\nNaN\nNaN\n\n\n16207\nNo\nnat-met-sto-sto\nNatural\nMeteorological\nStorm\nStorm (General)\nSPI\nCanary Islands\nNorthern Africa\nAfrica\n...\n4.0\n13.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n16208\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSOM\nSomalia\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n4400000.0\nNaN\n4400000.0\nNaN\nNaN\nNaN\n\n\n\n\n16209 rows × 29 columns\n\n\n\nLet’s also get rid of data points if it’s missing important variables we care about.\n\ndf = df.dropna(subset=['Country', 'Disaster Type', 'Start Year'])\ndf\n\n\n\n\n\n\n\n\nHistoric\nClassification Key\nDisaster Group\nDisaster Subgroup\nDisaster Type\nDisaster Subtype\nISO\nCountry\nSubregion\nRegion\n...\nEnd Month\nEnd Day\nTotal Deaths\nNo. Injured\nNo. Affected\nNo. Homeless\nTotal Affected\nTotal Damage ('000 US$)\nTotal Damage, Adjusted ('000 US$)\nCPI\n\n\n\n\n0\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nDJI\nDjibouti\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n100000.0\nNaN\n100000.0\nNaN\nNaN\n58.111474\n\n\n1\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSDN\nSudan\nNorthern Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n2000000.0\nNaN\n2000000.0\nNaN\nNaN\n56.514291\n\n\n2\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSOM\nSomalia\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\n21.0\nNaN\n1200000.0\nNaN\n1200000.0\nNaN\nNaN\n56.514291\n\n\n3\nNo\ntec-tra-roa-roa\nTechnological\nTransport\nRoad\nRoad\nAGO\nAngola\nSub-Saharan Africa\nAfrica\n...\n1.0\n26.0\n14.0\n11.0\nNaN\nNaN\n11.0\nNaN\nNaN\n56.514291\n\n\n4\nNo\nnat-hyd-flo-riv\nNatural\nHydrological\nFlood\nRiverine flood\nAGO\nAngola\nSub-Saharan Africa\nAfrica\n...\n1.0\n15.0\n31.0\nNaN\n70000.0\nNaN\n70000.0\n10000.0\n17695.0\n56.514291\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16204\nNo\ntec-tra-roa-roa\nTechnological\nTransport\nRoad\nRoad\nBRA\nBrazil\nLatin America and the Caribbean\nAmericas\n...\n4.0\n8.0\n10.0\n18.0\nNaN\nNaN\n18.0\nNaN\nNaN\nNaN\n\n\n16205\nNo\ntec-mis-fir-fir\nTechnological\nMiscellaneous accident\nFire (Miscellaneous)\nFire (Miscellaneous)\nCHN\nChina\nEastern Asia\nAsia\n...\n4.0\n8.0\n20.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n16206\nNo\nnat-met-sto-san\nNatural\nMeteorological\nStorm\nSand/Dust storm\nIRQ\nIraq\nWestern Asia\nAsia\n...\n4.0\n14.0\nNaN\n2751.0\nNaN\nNaN\n2751.0\nNaN\nNaN\nNaN\n\n\n16207\nNo\nnat-met-sto-sto\nNatural\nMeteorological\nStorm\nStorm (General)\nSPI\nCanary Islands\nNorthern Africa\nAfrica\n...\n4.0\n13.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n16208\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSOM\nSomalia\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n4400000.0\nNaN\n4400000.0\nNaN\nNaN\nNaN\n\n\n\n\n16209 rows × 29 columns\n\n\n\nGet rid of duplicates\n\ndf = df.drop_duplicates()\ndf\n\n\n\n\n\n\n\n\nHistoric\nClassification Key\nDisaster Group\nDisaster Subgroup\nDisaster Type\nDisaster Subtype\nISO\nCountry\nSubregion\nRegion\n...\nEnd Month\nEnd Day\nTotal Deaths\nNo. Injured\nNo. Affected\nNo. Homeless\nTotal Affected\nTotal Damage ('000 US$)\nTotal Damage, Adjusted ('000 US$)\nCPI\n\n\n\n\n0\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nDJI\nDjibouti\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n100000.0\nNaN\n100000.0\nNaN\nNaN\n58.111474\n\n\n1\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSDN\nSudan\nNorthern Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n2000000.0\nNaN\n2000000.0\nNaN\nNaN\n56.514291\n\n\n2\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSOM\nSomalia\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\n21.0\nNaN\n1200000.0\nNaN\n1200000.0\nNaN\nNaN\n56.514291\n\n\n3\nNo\ntec-tra-roa-roa\nTechnological\nTransport\nRoad\nRoad\nAGO\nAngola\nSub-Saharan Africa\nAfrica\n...\n1.0\n26.0\n14.0\n11.0\nNaN\nNaN\n11.0\nNaN\nNaN\n56.514291\n\n\n4\nNo\nnat-hyd-flo-riv\nNatural\nHydrological\nFlood\nRiverine flood\nAGO\nAngola\nSub-Saharan Africa\nAfrica\n...\n1.0\n15.0\n31.0\nNaN\n70000.0\nNaN\n70000.0\n10000.0\n17695.0\n56.514291\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16204\nNo\ntec-tra-roa-roa\nTechnological\nTransport\nRoad\nRoad\nBRA\nBrazil\nLatin America and the Caribbean\nAmericas\n...\n4.0\n8.0\n10.0\n18.0\nNaN\nNaN\n18.0\nNaN\nNaN\nNaN\n\n\n16205\nNo\ntec-mis-fir-fir\nTechnological\nMiscellaneous accident\nFire (Miscellaneous)\nFire (Miscellaneous)\nCHN\nChina\nEastern Asia\nAsia\n...\n4.0\n8.0\n20.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n16206\nNo\nnat-met-sto-san\nNatural\nMeteorological\nStorm\nSand/Dust storm\nIRQ\nIraq\nWestern Asia\nAsia\n...\n4.0\n14.0\nNaN\n2751.0\nNaN\nNaN\n2751.0\nNaN\nNaN\nNaN\n\n\n16207\nNo\nnat-met-sto-sto\nNatural\nMeteorological\nStorm\nStorm (General)\nSPI\nCanary Islands\nNorthern Africa\nAfrica\n...\n4.0\n13.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n16208\nNo\nnat-cli-dro-dro\nNatural\nClimatological\nDrought\nDrought\nSOM\nSomalia\nSub-Saharan Africa\nAfrica\n...\nNaN\nNaN\nNaN\nNaN\n4400000.0\nNaN\n4400000.0\nNaN\nNaN\nNaN\n\n\n\n\n16209 rows × 29 columns"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#interesting-variables",
    "href": "posts/Environmental Machine Learning Project/index.html#interesting-variables",
    "title": "Environmental Data Project",
    "section": "Interesting Variables:",
    "text": "Interesting Variables:\n\nDisaster Type\n\nLocation (country, region, longitude, latitude)\nTotal Deaths, No. Affected, and No. Injured\nTime (start day, start month, etc.)\nCost (Reconstruction Costs and Total Damage)"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#research-questions",
    "href": "posts/Environmental Machine Learning Project/index.html#research-questions",
    "title": "Environmental Data Project",
    "section": "Research Questions:",
    "text": "Research Questions:\n\n“Which countries have experienced the highest number of natural disasters in the past 25 years?”\n\n\nWe’ll need to investigate variables on countries, when it occured, and type of disaster\n\n\n“Are certain types of disasters becoming more common over time?”\n\n\nWe’ll need to investigate variables on time, when it occured, and type of disaster\nLet’s consider limitations with this dataset since it starts in 2000\n\n\n“Can we predict the average number of deaths or affected people for an event based on disaster type and context?”\n\n\nWe’ll need to investigate variables on Total Deaths, No. Affected, and No. Injured and type of disaster\n\n\n“Can we experiment with data forecasting and predict the number of disasters a country might experience based on its historical trends and geography?”\n\n\nWe’ll need to investigate variables on type of disaster, when it occured, and location\nWe’ll need to incorporate another dataset on geography\n\n\n“Can we classify the severity of a disaster based on its type, location, and year?”\n\n\nWe’ll need to investigate variables on type, location, time, and severity"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#tools-needed",
    "href": "posts/Environmental Machine Learning Project/index.html#tools-needed",
    "title": "Environmental Data Project",
    "section": "Tools Needed",
    "text": "Tools Needed\n\nFor visualizations, matplotlib, geopanda, seaborn and plotly\nFor machine learning, specifically forecasting, we can try Scikit-learn for regression or classification models or LSTM\nFor classification, we can use it to identify patterns or relationships among disasters"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#lets-get-started-on-first-research-question",
    "href": "posts/Environmental Machine Learning Project/index.html#lets-get-started-on-first-research-question",
    "title": "Environmental Data Project",
    "section": "Let’s get started on first research question",
    "text": "Let’s get started on first research question\n\n“Which countries have experienced the highest number of natural disasters?”\n\n\nWe’ll need to investigate variables on countries, when it occured, and type of disaster\n\n\ndisaster_count_by_country_df = df.groupby(['Country']).agg(\n    disaster_count=('Disaster Type', 'count')\n).reset_index().sort_values(by='disaster_count', ascending=False)\n\n\ndisaster_count_by_country_df\n\n\n\n\n\n\n\n\nCountry\ndisaster_count\n\n\n\n\n39\nChina\n1356\n\n\n89\nIndia\n820\n\n\n212\nUnited States of America\n724\n\n\n90\nIndonesia\n565\n\n\n152\nPhilippines\n474\n\n\n...\n...\n...\n\n\n5\nAnguilla\n1\n\n\n218\nWallis and Futuna Islands\n1\n\n\n164\nSaint Helena\n1\n\n\n135\nNetherlands Antilles\n1\n\n\n49\nCuraçao\n1\n\n\n\n\n222 rows × 2 columns\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default=\"iframe\"\n\nfig = px.scatter(\n    disaster_count_by_country_df.query('disaster_count&gt;=300'),\n    x=\"Country\",\n    y=\"disaster_count\",\n    size=\"disaster_count\",\n    color=\"Country\",\n    hover_name=\"Country\",\n    log_y=True, \n    size_max=100,\n    title=\"Number of Disaster Types by Country\"\n)\n\nfig.show()"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#analysis-of-first-research-question",
    "href": "posts/Environmental Machine Learning Project/index.html#analysis-of-first-research-question",
    "title": "Environmental Data Project",
    "section": "Analysis of first research question",
    "text": "Analysis of first research question\nFrom this visualization, we can see that India, China, and the USA have experienced the highest number of natural disasters. This is likely due to their large size, which means that there is more surface area taken into account. Surprising countries are the ones that are smaller but still have faced many natural disasters, such as the Philippines and Nigeria."
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#lets-get-started-on-the-second-research-question",
    "href": "posts/Environmental Machine Learning Project/index.html#lets-get-started-on-the-second-research-question",
    "title": "Environmental Data Project",
    "section": "Let’s get started on the second research question",
    "text": "Let’s get started on the second research question\n\n“Are certain types of disasters becoming more common over time?”\n\n\nWe’ll need to investigate variables on time, when it occured, and type of disaster\nLet’s consider limitations with this dataset since it starts in 2000\n\n\ndisaster_counts = df.groupby(['Start Year', 'Disaster Type']).size().reset_index(name='Count')\n\ndisaster_counts\n\n\n\n\n\n\n\n\nStart Year\nDisaster Type\nCount\n\n\n\n\n0\n2000\nAir\n31\n\n\n1\n2000\nChemical spill\n3\n\n\n2\n2000\nCollapse (Industrial)\n3\n\n\n3\n2000\nCollapse (Miscellaneous)\n11\n\n\n4\n2000\nDrought\n27\n\n\n...\n...\n...\n...\n\n\n609\n2025\nRail\n1\n\n\n610\n2025\nRoad\n19\n\n\n611\n2025\nStorm\n26\n\n\n612\n2025\nWater\n4\n\n\n613\n2025\nWildfire\n8\n\n\n\n\n614 rows × 3 columns\n\n\n\n\nfig = px.line(\n    disaster_counts,\n    x='Start Year',\n    y='Count',\n    color='Disaster Type',  \n    title='Disaster Types Over Time',\n    labels={'Year': 'Year', 'Count': 'Number of Disasters'},\n)\n\nfig.show()"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#analysis-of-second-research-question",
    "href": "posts/Environmental Machine Learning Project/index.html#analysis-of-second-research-question",
    "title": "Environmental Data Project",
    "section": "Analysis of second research question",
    "text": "Analysis of second research question\nFrom this visualization, we can see that it is difficult to answer if there are certain types of disasters becoming more common over time. This is because of our limited data set that starts in the year 2000. To answer, this question, we would need to find data that dates back far enough to see a difference in the frequency of certain disaster types."
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#visualization-to-explore-relationship-between-total-deaths-and-occurence-count-for-each-disaster-subtype",
    "href": "posts/Environmental Machine Learning Project/index.html#visualization-to-explore-relationship-between-total-deaths-and-occurence-count-for-each-disaster-subtype",
    "title": "Environmental Data Project",
    "section": "Visualization to explore relationship between total deaths and occurence count for each disaster subtype",
    "text": "Visualization to explore relationship between total deaths and occurence count for each disaster subtype\n\nscatter_data = df.groupby('Disaster Subtype').agg(\n    total_deaths=('Total Deaths', 'sum'),\n    occurrence_count=('Disaster Subtype', 'count')\n).reset_index()\n\nscatter_data\n\n\n\n\n\n\n\n\nDisaster Subtype\ntotal_deaths\noccurrence_count\n\n\n\n\n0\nAir\n17267.0\n439\n\n\n1\nAnimal incident\n12.0\n1\n\n\n2\nAsh fall\n663.0\n102\n\n\n3\nAvalanche (dry)\n16.0\n1\n\n\n4\nAvalanche (wet)\n1889.0\n54\n\n\n...\n...\n...\n...\n\n\n58\nViral disease\n47825.0\n350\n\n\n59\nVolcanic activity (General)\n516.0\n11\n\n\n60\nWater\n51946.0\n1149\n\n\n61\nWildfire (General)\n702.0\n85\n\n\n62\nWorms infestation\n0.0\n2\n\n\n\n\n63 rows × 3 columns\n\n\n\n\nfig = px.scatter(\n    scatter_data,\n    x='Disaster Subtype',\n    y='total_deaths',\n    size='occurrence_count',    \n    color='Disaster Subtype',     \n    title='Disaster Subtypes: Total Deaths vs. Occurrence Count',\n    labels={\n        'disaster_subtype': 'Disaster Subtype',\n        'total_deaths': 'Total Deaths'\n    },\n)\n\n\n\nfig.show()"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#analysis-of-scatterplot-visualization",
    "href": "posts/Environmental Machine Learning Project/index.html#analysis-of-scatterplot-visualization",
    "title": "Environmental Data Project",
    "section": "Analysis of scatterplot visualization",
    "text": "Analysis of scatterplot visualization\nWe can see that Ground Movement is an outlier and has the highest number of deaths at around 550k. In terms of disaster subtypes with the largest occurence count, we can notice Road, Riverine Flood, Flood, Water, and Tropical Cyclone. We can see that most of these are natural with the exception of Road."
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#map-visualization-on-devastating-disasters-around-the-world",
    "href": "posts/Environmental Machine Learning Project/index.html#map-visualization-on-devastating-disasters-around-the-world",
    "title": "Environmental Data Project",
    "section": "Map Visualization on Devastating Disasters Around the World",
    "text": "Map Visualization on Devastating Disasters Around the World\n\nmap_df = df[(df['Latitude'].notna()) & (df['Longitude'].notna())]\n\nmap_df['Total Deaths'] = map_df['Total Deaths'].fillna(0)\n\nmap_df = map_df[(map_df['Total Deaths'] &gt; 0)]\n\nmap_df\n\n/var/folders/h6/1nj6sx2s1nxdyfr36bhcxvlc0000gn/T/ipykernel_2016/904054904.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n\n\n\nHistoric\nClassification Key\nDisaster Group\nDisaster Subgroup\nDisaster Type\nDisaster Subtype\nISO\nCountry\nSubregion\nRegion\n...\nEnd Month\nEnd Day\nTotal Deaths\nNo. Injured\nNo. Affected\nNo. Homeless\nTotal Affected\nTotal Damage ('000 US$)\nTotal Damage, Adjusted ('000 US$)\nCPI\n\n\n\n\n33\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n1.0\n14.0\n7.0\n2528.0\n1760000.0\n92479.0\n1855007.0\n73500.0\n130056.0\n56.514291\n\n\n36\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n1.0\n26.0\n1.0\n2.0\n10300.0\nNaN\n10302.0\n483.0\n855.0\n56.514291\n\n\n50\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nIRN\nIran (Islamic Republic of)\nSouthern Asia\nAsia\n...\n2.0\n2.0\n1.0\n15.0\n1500.0\n500.0\n2015.0\nNaN\nNaN\n56.514291\n\n\n75\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCOL\nColombia\nLatin America and the Caribbean\nAmericas\n...\n11.0\n8.0\n2.0\nNaN\n430.0\nNaN\n430.0\nNaN\nNaN\n56.514291\n\n\n208\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nIDN\nIndonesia\nSouth-eastern Asia\nAsia\n...\n5.0\n4.0\n45.0\n270.0\nNaN\n52500.0\n52770.0\n30000.0\n53084.0\n56.514291\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16091\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n1.0\n7.0\n126.0\n188.0\n46500.0\nNaN\n46688.0\nNaN\nNaN\nNaN\n\n\n16099\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nETH\nEthiopia\nSub-Saharan Africa\nAfrica\n...\n1.0\n11.0\n2.0\nNaN\n99000.0\nNaN\n99000.0\nNaN\nNaN\nNaN\n\n\n16184\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nMMR\nMyanmar\nSouth-eastern Asia\nAsia\n...\n3.0\n28.0\n3784.0\n4824.0\n282790.0\nNaN\n287614.0\nNaN\nNaN\nNaN\n\n\n16185\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nTHA\nThailand\nSouth-eastern Asia\nAsia\n...\n3.0\n28.0\n44.0\n37.0\n2313.0\nNaN\n2350.0\nNaN\nNaN\nNaN\n\n\n16196\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nTJK\nTajikistan\nCentral Asia\nAsia\n...\n4.0\n13.0\n1.0\nNaN\n145.0\nNaN\n145.0\nNaN\nNaN\nNaN\n\n\n\n\n1356 rows × 29 columns\n\n\n\n\nfig = px.scatter_geo(\n    map_df,\n    lat='Latitude',\n    lon='Longitude',\n    color='Disaster Subtype',\n    size='Total Deaths',  \n    hover_name='Country',\n    title='Global Disasters Map',\n    size_max=30,\n)\n\nfig.update_layout(\n    geo=dict(\n        showland=True,\n        showcountries=True\n    )\n)\n\nfig.show()"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#analysis-of-map-visualization",
    "href": "posts/Environmental Machine Learning Project/index.html#analysis-of-map-visualization",
    "title": "Environmental Data Project",
    "section": "Analysis of Map Visualization",
    "text": "Analysis of Map Visualization\nHere, we can see that Haiti experienced a Ground Movement disaster that resulted in a huge amount of deaths. We also see that Indonesia has deathly tsunamis. China, Kazakhstan, and Russia face a lot of floods that have caused a large loss of lives."
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#responding-to-questions-from-research-professor-prior-week",
    "href": "posts/Environmental Machine Learning Project/index.html#responding-to-questions-from-research-professor-prior-week",
    "title": "Environmental Data Project",
    "section": "Responding to questions from research professor prior week",
    "text": "Responding to questions from research professor prior week\n\n“This is likely due to their large size, which means that there is more surface area taken into account.” -&gt; Would it be possible to apply some normalization techniques to account for differences in country size? -&gt; answer: Great idea! We could try to find another data source that contains the country size and use data techniques to merge it together. Once we’ve prepared the data, we can perform normalization techniques by dividing the number of natural disasters with the corresponding country’s size. We can try doing this during week 5 when we incorporate SQL.\nWould you consider numbering the research questions with bullet points to make them easier to reference? -&gt; Yes, I’ll go back and adjust them! This is a great piece of advice\nClarifying question “dataset spans from 2000 to 2025—is that right?” -&gt; answer: Yes, this dataset spans 25 years starting from 2000. Even though there exists data before 2000, according to the data source, “Pre-2000 data is particularly subject to reporting biases.”\nRegarding visualizations and figures: Could you ensure consistency in how parameters are represented? For example, if size represents occurrence or death, it would be helpful to maintain that convention across all figures. -&gt; answer: Yes, this is a helpful piece of advice but the reason for the inconsistency in how parameters are represented is due to how these visualizations were more so for exploratory purposes to better understand the data. I’ll keep this advice in mind and ensure consistency in how parameters are represented for the final report."
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#air-pollution-dataset-using-api",
    "href": "posts/Environmental Machine Learning Project/index.html#air-pollution-dataset-using-api",
    "title": "Environmental Data Project",
    "section": "Air Pollution Dataset Using API",
    "text": "Air Pollution Dataset Using API\nOur data source is called Open Weather Map. I made an account with them and verified my email address to obtain the API key. According to the website, “the Air Pollution API provides current, forecast and historical air pollution data for any coordinates on the globe. Besides basic Air Quality Index, the API returns data about polluting gases, such as Carbon monoxide (CO), Nitrogen monoxide (NO), Nitrogen dioxide (NO2), Ozone (O3), Sulphur dioxide (SO2), Ammonia (NH3), and particulates (PM2.5 and PM10). Air pollution forecast is available for 4 days with hourly granularity. Historical data is accessible from 27th November 2020.”\n\n\n\n\nimport requests\n\nAPI_KEY = \"dc622205c25e4f765124ba4c03f370ba\"\nLAT = 35.6764\nLON = 139.6500\n\nurl = f\"http://api.openweathermap.org/data/2.5/air_pollution\"\nparams = {\n    \"lat\": LAT,\n    \"lon\": LON,\n    \"appid\": API_KEY\n}\n\nresponse = requests.get(url, params=params)\ndata = response.json()\n\nprint(\"Air Quality Index (AQI):\", data['list'][0]['main']['aqi'])\nprint(\"Components (μg/m³):\", data['list'][0]['components'])\n\nAir Quality Index (AQI): 2\nComponents (μg/m³): {'co': 171.31, 'no': 1.28, 'no2': 17.65, 'o3': 82.99, 'so2': 7.58, 'pm2_5': 4.91, 'pm10': 7.89, 'nh3': 0.52}"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#air-quality-history",
    "href": "posts/Environmental Machine Learning Project/index.html#air-quality-history",
    "title": "Environmental Data Project",
    "section": "Air Quality History",
    "text": "Air Quality History\nThe above code is testing the usage of the API. I looked up the coordinates of Tokyo and plugged that in to obtain the Air Quality Index. I received a value of 2. Now let’s trying using the API to obtain the Air Quality History.\n\nimport requests\nimport pandas as pd\nfrom datetime import datetime\n\nAPI_KEY = \"dc622205c25e4f765124ba4c03f370ba\"\nLAT = 35.6764\nLON = 139.6500\n\nstart = int(datetime(2025, 1, 1).timestamp())\nend = int(datetime(2025, 1, 6).timestamp())  \n\nurl = \"http://api.openweathermap.org/data/2.5/air_pollution/history\"\nparams = {\n    \"lat\": LAT,\n    \"lon\": LON,\n    \"start\": start,\n    \"end\": end,\n    \"appid\": API_KEY\n}\n\nresponse = requests.get(url, params=params)\ndata = response.json()\n\nrecords = []\nfor entry in data.get(\"list\", []):\n    ts = datetime.fromtimestamp(entry[\"dt\"])\n    aqi = entry[\"main\"][\"aqi\"]\n    components = entry[\"components\"]\n    components[\"timestamp\"] = ts\n    components[\"aqi\"] = aqi\n    records.append(components)\n\ndf = pd.DataFrame(records)\ndf.set_index(\"timestamp\", inplace=True)\n\nprint(df)\n\n                         co      no     no2     o3    so2  pm2_5   pm10   nh3  \\\ntimestamp                                                                       \n2025-01-01 00:00:00  333.79    0.00   26.73  57.22  19.07   0.86   2.03  1.03   \n2025-01-01 01:00:00  323.77    0.00   23.65  59.37  16.45   0.72   1.90  0.95   \n2025-01-01 02:00:00  317.10    0.00   22.62  60.80  15.74   0.65   1.91  0.90   \n2025-01-01 03:00:00  317.10    0.00   23.31  61.51  16.21   0.67   2.04  0.89   \n2025-01-01 04:00:00  323.77    0.00   24.68  60.80  17.40   0.72   2.18  0.93   \n...                     ...     ...     ...    ...    ...    ...    ...   ...   \n2025-01-05 20:00:00  834.47  236.03  126.12   0.00  72.48  22.26  31.77  3.96   \n2025-01-05 21:00:00  741.00  189.54  116.53   0.00  58.65  20.81  28.91  3.64   \n2025-01-05 22:00:00  554.08   98.35   98.71   0.00  47.21  16.70  22.60  2.94   \n2025-01-05 23:00:00  500.68   75.10   89.11   0.00  40.53  16.16  21.01  2.28   \n2025-01-06 00:00:00  480.65   64.37   84.31   0.00  31.47  16.41  20.80  1.63   \n\n                     aqi  \ntimestamp                 \n2025-01-01 00:00:00    1  \n2025-01-01 01:00:00    1  \n2025-01-01 02:00:00    2  \n2025-01-01 03:00:00    2  \n2025-01-01 04:00:00    2  \n...                  ...  \n2025-01-05 20:00:00    3  \n2025-01-05 21:00:00    3  \n2025-01-05 22:00:00    3  \n2025-01-05 23:00:00    3  \n2025-01-06 00:00:00    3  \n\n[121 rows x 9 columns]\n\n\nNow that we have our history of the air quality over the past five days at the start of 2025, we can try to categorize it based on https://www.iaqdetectors.com/blogs/what-is-air-quality-index-uba-standardhttps://www.iaqdetectors.com/blogs/what-is-air-quality-index-uba-standard, which says: Level 1: Excellent Air Quality. AQI Range: 1 (Green) Level 2: Good Air Quality. AQI Range: 2 (Green) Level 3: Moderate Air Quality. AQI Range: 3 (Yellow) Level 4: Poor Air Quality. AQI Range: 4 (Orange) Level 5: Very Poor Air Quality. AQI Range: 5 (Red or Purple)"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#categorizing-air-quality",
    "href": "posts/Environmental Machine Learning Project/index.html#categorizing-air-quality",
    "title": "Environmental Data Project",
    "section": "Categorizing Air Quality",
    "text": "Categorizing Air Quality\n\ndef categorize_aqi(aqi):\n    if aqi == 1:\n        return \"Excellent\"\n    elif aqi == 2:\n        return \"Good\"\n    elif aqi == 3:\n        return \"Moderate\"\n    elif aqi == 4:\n        return \"Poor\"\n    else:\n        return \"Very Poor\"\n\ndf[\"risk_level\"] = df[\"aqi\"].apply(categorize_aqi)\n\nprint(df)\n\n                         co      no     no2     o3    so2  pm2_5   pm10   nh3  \\\ntimestamp                                                                       \n2025-01-01 00:00:00  333.79    0.00   26.73  57.22  19.07   0.86   2.03  1.03   \n2025-01-01 01:00:00  323.77    0.00   23.65  59.37  16.45   0.72   1.90  0.95   \n2025-01-01 02:00:00  317.10    0.00   22.62  60.80  15.74   0.65   1.91  0.90   \n2025-01-01 03:00:00  317.10    0.00   23.31  61.51  16.21   0.67   2.04  0.89   \n2025-01-01 04:00:00  323.77    0.00   24.68  60.80  17.40   0.72   2.18  0.93   \n...                     ...     ...     ...    ...    ...    ...    ...   ...   \n2025-01-05 20:00:00  834.47  236.03  126.12   0.00  72.48  22.26  31.77  3.96   \n2025-01-05 21:00:00  741.00  189.54  116.53   0.00  58.65  20.81  28.91  3.64   \n2025-01-05 22:00:00  554.08   98.35   98.71   0.00  47.21  16.70  22.60  2.94   \n2025-01-05 23:00:00  500.68   75.10   89.11   0.00  40.53  16.16  21.01  2.28   \n2025-01-06 00:00:00  480.65   64.37   84.31   0.00  31.47  16.41  20.80  1.63   \n\n                     aqi risk_level  \ntimestamp                            \n2025-01-01 00:00:00    1  Excellent  \n2025-01-01 01:00:00    1  Excellent  \n2025-01-01 02:00:00    2       Good  \n2025-01-01 03:00:00    2       Good  \n2025-01-01 04:00:00    2       Good  \n...                  ...        ...  \n2025-01-05 20:00:00    3   Moderate  \n2025-01-05 21:00:00    3   Moderate  \n2025-01-05 22:00:00    3   Moderate  \n2025-01-05 23:00:00    3   Moderate  \n2025-01-06 00:00:00    3   Moderate  \n\n[121 rows x 10 columns]"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#line-graph-on-air-quality",
    "href": "posts/Environmental Machine Learning Project/index.html#line-graph-on-air-quality",
    "title": "Environmental Data Project",
    "section": "Line graph on Air Quality",
    "text": "Line graph on Air Quality\nAfter, we can visualize the data over the 5 day period!\n\ndef AQI_Plot(df, start, end, location):\n    fig = px.line(df, x=df.index, y=\"aqi\", title=f\"Air Quality Index (AQI) in {location} from {start} to {end}\",\n              labels={\"AQI\": \"AQI\", \"timestamp\": \"Date\"})\n\n    fig.update_traces(line=dict(color='blue'))\n    fig.update_layout(yaxis_title=\"AQI\", xaxis_title=\"Date\")\n\n    fig.show()\nAQI_Plot(df, \"2025-01-01\" ,\"2025-01-06\", \"Tokyo\" )\n\n\n\n\nHowever, if we wanted to incorporate the risk levels onto the visualization, we can add some color identification by specifying the color discrete map. The downside is that it is no longer continuous and a little harder to understand since the levels change so dramatically.\n\nimport plotly.express as px\n\ndef AQI_Color_Plot(df, start, end, location):\n\n    fig = px.scatter(df, x=df.index, y=\"aqi\", color=\"risk_level\",\n                    title=f\"Air Quality Index (AQI) in {location} from {start} to {end}\",\n                    labels={\"aqi\": \"AQI\", \"timestamp\": \"Date\"},\n                    color_discrete_map={\n                        \"Excellent\": \"green\",\n                        \"Good\": \"limegreen\",\n                        \"Moderate\": \"orange\",\n                        \"Poor\": \"orangered\",\n                        \"Very Poor\": \"red\"\n                    })\n\n    fig.update_traces(mode=\"lines+markers\")\n    fig.update_layout(yaxis_title=\"AQI\", xaxis_title=\"Date\")\n\n    fig.show()\nAQI_Color_Plot(df, \"2025-01-01\" ,\"2025-01-06\", \"Tokyo\" )\n\n\n\n\nNow let’s wrap everything into a function so that the parameters can be easily changed based on user input.\n\ndef create_df(lat, lon, start, end, location):\n    API_KEY = \"dc622205c25e4f765124ba4c03f370ba\"\n    LAT = lat\n    LON = lon\n\n    start = int(datetime.strptime(start, \"%Y-%m-%d\").timestamp())\n    end = int(datetime.strptime(end, \"%Y-%m-%d\").timestamp())\n\n    url = \"http://api.openweathermap.org/data/2.5/air_pollution/history\"\n    params = {\n        \"lat\": LAT,\n        \"lon\": LON,\n        \"start\": start,\n        \"end\": end,\n        \"appid\": API_KEY\n    }\n\n    response = requests.get(url, params=params)\n    data = response.json()\n\n    records = []\n    for entry in data.get(\"list\", []):\n        ts = datetime.fromtimestamp(entry[\"dt\"])\n        aqi = entry[\"main\"][\"aqi\"]\n        components = entry[\"components\"]\n        components[\"timestamp\"] = ts\n        components[\"aqi\"] = aqi\n        records.append(components)\n\n        df = pd.DataFrame(records)\n        df.set_index(\"timestamp\", inplace=True)\n        \n        def categorize_aqi(aqi):\n            if aqi == 1:\n                return \"Excellent\"\n            elif aqi == 2:\n                return \"Good\"\n            elif aqi == 3:\n                return \"Moderate\"\n            elif aqi == 4:\n                return \"Poor\"\n            else:\n                return \"Very Poor\"\n\n    df[\"risk_level\"] = df[\"aqi\"].apply(categorize_aqi)\n\n    print(df)\n    AQI_Color_Plot(df, start, end, location )"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#example-usage-of-our-function-for-the-specific-location-los-angeles",
    "href": "posts/Environmental Machine Learning Project/index.html#example-usage-of-our-function-for-the-specific-location-los-angeles",
    "title": "Environmental Data Project",
    "section": "Example usage of our function for the specific location Los Angeles",
    "text": "Example usage of our function for the specific location Los Angeles\nHere we are using the coordinates of Los Angeles and observing the air quality between Jan. 5 and Jan. 10, 2025, which was during the wildfires in the Palisades and Eaton Canyon.\n\nlat = 34.0549\nlon = 118.2426\nstart_date = \"2025-01-05\" \nend_date = \"2025-01-10\" \nlocation = \"Los Angeles\"\n\ndf = create_df(lat, lon, start_date, end_date, location)\nprint(df)\n\n                          co     no    no2     o3    so2   pm2_5    pm10  \\\ntimestamp                                                                  \n2025-01-05 00:00:00  1735.69  29.95  58.95   0.00  15.74  173.36  225.51   \n2025-01-05 01:00:00  1642.23  29.50  61.01   0.00  14.78  173.32  217.93   \n2025-01-05 02:00:00  1562.12  29.50  63.75   0.00  14.90  175.63  215.06   \n2025-01-05 03:00:00  1482.01  28.61  67.17   0.00  15.50  178.79  215.36   \n2025-01-05 04:00:00  1415.25  25.70  70.60   0.00  16.45  187.26  221.11   \n...                      ...    ...    ...    ...    ...     ...     ...   \n2025-01-09 20:00:00   614.17   0.02  43.87  33.97  42.92   38.82   61.52   \n2025-01-09 21:00:00   620.84   0.02  44.55  32.54  44.82   38.22   61.39   \n2025-01-09 22:00:00   647.54   0.04  49.35  28.25  51.98   39.03   61.56   \n2025-01-09 23:00:00   754.36   0.14  61.69  17.70  62.94   47.53   71.75   \n2025-01-10 00:00:00   834.47   0.31  71.29  11.00  66.76   54.43   79.63   \n\n                      nh3  aqi risk_level  \ntimestamp                                  \n2025-01-05 00:00:00  3.20    5  Very Poor  \n2025-01-05 01:00:00  2.03    5  Very Poor  \n2025-01-05 02:00:00  1.33    5  Very Poor  \n2025-01-05 03:00:00  0.81    5  Very Poor  \n2025-01-05 04:00:00  0.34    5  Very Poor  \n...                   ...  ...        ...  \n2025-01-09 20:00:00  6.46    3   Moderate  \n2025-01-09 21:00:00  7.16    3   Moderate  \n2025-01-09 22:00:00  7.41    3   Moderate  \n2025-01-09 23:00:00  8.61    3   Moderate  \n2025-01-10 00:00:00  9.88    4       Poor  \n\n[121 rows x 10 columns]\n\n\n\n\n\nNone"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#normalization-techniques-to-account-for-differences-in-country-size",
    "href": "posts/Environmental Machine Learning Project/index.html#normalization-techniques-to-account-for-differences-in-country-size",
    "title": "Environmental Data Project",
    "section": "Normalization techniques to account for differences in country size",
    "text": "Normalization techniques to account for differences in country size\n“This is likely due to their large size, which means that there is more surface area taken into account.” -&gt; Would it be possible to apply some normalization techniques to account for differences in country size? -&gt; answer: Great idea! We could try to find another data source that contains the country size and use data techniques to merge it together. Once we’ve prepared the data, we can perform normalization techniques by dividing the number of natural disasters with the corresponding country’s size."
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#obtain-world-population-dataset",
    "href": "posts/Environmental Machine Learning Project/index.html#obtain-world-population-dataset",
    "title": "Environmental Data Project",
    "section": "Obtain World Population Dataset",
    "text": "Obtain World Population Dataset\nFirst thing, we want a dataset on the population of each country. By doing a Google Search, I was able to find one on Kaggle.\n\n\n\n\ndf_pop = pd.read_csv('world_population.csv')\ndf_pop\n\n\n\n\n\n\n\n\nRank\nCCA3\nCountry/Territory\nCapital\nContinent\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\n\n\n0\n36\nAFG\nAfghanistan\nKabul\nAsia\n41128771\n38972230\n33753499\n28189672\n19542982\n10694796\n12486631\n10752971\n652230\n63.0587\n1.0257\n0.52\n\n\n1\n138\nALB\nAlbania\nTirana\nEurope\n2842321\n2866849\n2882481\n2913399\n3182021\n3295066\n2941651\n2324731\n28748\n98.8702\n0.9957\n0.04\n\n\n2\n34\nDZA\nAlgeria\nAlgiers\nAfrica\n44903225\n43451666\n39543154\n35856344\n30774621\n25518074\n18739378\n13795915\n2381741\n18.8531\n1.0164\n0.56\n\n\n3\n213\nASM\nAmerican Samoa\nPago Pago\nOceania\n44273\n46189\n51368\n54849\n58230\n47818\n32886\n27075\n199\n222.4774\n0.9831\n0.00\n\n\n4\n203\nAND\nAndorra\nAndorra la Vella\nEurope\n79824\n77700\n71746\n71519\n66097\n53569\n35611\n19860\n468\n170.5641\n1.0100\n0.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\n226\nWLF\nWallis and Futuna\nMata-Utu\nOceania\n11572\n11655\n12182\n13142\n14723\n13454\n11315\n9377\n142\n81.4930\n0.9953\n0.00\n\n\n230\n172\nESH\nWestern Sahara\nEl Aaiún\nAfrica\n575986\n556048\n491824\n413296\n270375\n178529\n116775\n76371\n266000\n2.1654\n1.0184\n0.01\n\n\n231\n46\nYEM\nYemen\nSanaa\nAsia\n33696614\n32284046\n28516545\n24743946\n18628700\n13375121\n9204938\n6843607\n527968\n63.8232\n1.0217\n0.42\n\n\n232\n63\nZMB\nZambia\nLusaka\nAfrica\n20017675\n18927715\n16248230\n13792086\n9891136\n7686401\n5720438\n4281671\n752612\n26.5976\n1.0280\n0.25\n\n\n233\n74\nZWE\nZimbabwe\nHarare\nAfrica\n16320537\n15669666\n14154937\n12839771\n11834676\n10113893\n7049926\n5202918\n390757\n41.7665\n1.0204\n0.20\n\n\n\n\n234 rows × 17 columns"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#create-and-use-sql-databases-for-data-manipulation",
    "href": "posts/Environmental Machine Learning Project/index.html#create-and-use-sql-databases-for-data-manipulation",
    "title": "Environmental Data Project",
    "section": "Create and Use SQL Databases for Data Manipulation",
    "text": "Create and Use SQL Databases for Data Manipulation\nSo now, we have two seperate databases. One on EMDAT data and the other one containing information of different countries. Because our goal is to apply some normalization techniques to account for differences in country size, we want to use SQL to merge the two databases. Our first step is to import SQL and then start a connection. With this connection, we can convert the two df’s into sql.\n\nimport sqlite3\nconn = sqlite3.connect(\"pop.sqlite\")\n\n\n\nwith sqlite3.connect(\"pop.sqlite\") as conn:\n    df_pop.to_sql(\"pop\", conn, if_exists=\"replace\", index=False)\n    map_df.to_sql(\"emdat\", conn, if_exists=\"replace\", index=False)\n\n\nwith sqlite3.connect(\"pop.sqlite\") as conn:\n    merged_df = pd.read_sql_query(\"\"\"\n        SELECT \n            e.*,\n            p.\"Area (km²)\"\n        FROM \n            emdat e\n        JOIN \n            pop p\n        ON \n            LOWER(e.Country) = LOWER(p.\"Country/Territory\")\n    \"\"\", conn)\n\nmerged_df\n\n\n\n\n\n\n\n\nHistoric\nClassification Key\nDisaster Group\nDisaster Subgroup\nDisaster Type\nDisaster Subtype\nISO\nCountry\nSubregion\nRegion\n...\nEnd Day\nTotal Deaths\nNo. Injured\nNo. Affected\nNo. Homeless\nTotal Affected\nTotal Damage ('000 US$)\nTotal Damage, Adjusted ('000 US$)\nCPI\nArea (km²)\n\n\n\n\n0\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n14.0\n7.0\n2528.0\n1760000.0\n92479.0\n1855007.0\n73500.0\n130056.0\n56.514291\n9706961\n\n\n1\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n26.0\n1.0\n2.0\n10300.0\nNaN\n10302.0\n483.0\n855.0\n56.514291\n9706961\n\n\n2\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCOL\nColombia\nLatin America and the Caribbean\nAmericas\n...\n8.0\n2.0\nNaN\n430.0\nNaN\n430.0\nNaN\nNaN\n56.514291\n1141748\n\n\n3\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nIDN\nIndonesia\nSouth-eastern Asia\nAsia\n...\n4.0\n45.0\n270.0\nNaN\n52500.0\n52770.0\n30000.0\n53084.0\n56.514291\n1904569\n\n\n4\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nIDN\nIndonesia\nSouth-eastern Asia\nAsia\n...\n4.0\n103.0\n2714.0\n200000.0\n2000.0\n204714.0\n41000.0\n72548.0\n56.514291\n1904569\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1127\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n7.0\n126.0\n188.0\n46500.0\nNaN\n46688.0\nNaN\nNaN\nNaN\n9706961\n\n\n1128\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nETH\nEthiopia\nSub-Saharan Africa\nAfrica\n...\n11.0\n2.0\nNaN\n99000.0\nNaN\n99000.0\nNaN\nNaN\nNaN\n1104300\n\n\n1129\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nMMR\nMyanmar\nSouth-eastern Asia\nAsia\n...\n28.0\n3784.0\n4824.0\n282790.0\nNaN\n287614.0\nNaN\nNaN\nNaN\n676578\n\n\n1130\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nTHA\nThailand\nSouth-eastern Asia\nAsia\n...\n28.0\n44.0\n37.0\n2313.0\nNaN\n2350.0\nNaN\nNaN\nNaN\n513120\n\n\n1131\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nTJK\nTajikistan\nCentral Asia\nAsia\n...\n13.0\n1.0\nNaN\n145.0\nNaN\n145.0\nNaN\nNaN\nNaN\n143100\n\n\n\n\n1132 rows × 30 columns"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#visualization",
    "href": "posts/Environmental Machine Learning Project/index.html#visualization",
    "title": "Environmental Data Project",
    "section": "Visualization",
    "text": "Visualization\nNow we can create the new visualization, but this time, the deaths are normalized by the country size.\n\ndisaster_counts = merged_df.groupby('Country').size().reset_index(name='disaster_count')\n\nmerged_df = merged_df.merge(disaster_counts, on='Country', how='left')\n\nmerged_df['disasters_normalized_by_size'] = round(\n    merged_df['disaster_count'] / merged_df['Area (km²)'] * 100000, 2\n)\n\n\n\nmerged_df\n\n\n\n\n\n\n\n\nHistoric\nClassification Key\nDisaster Group\nDisaster Subgroup\nDisaster Type\nDisaster Subtype\nISO\nCountry\nSubregion\nRegion\n...\nNo. Injured\nNo. Affected\nNo. Homeless\nTotal Affected\nTotal Damage ('000 US$)\nTotal Damage, Adjusted ('000 US$)\nCPI\nArea (km²)\ndisaster_count\ndisasters_normalized_by_size\n\n\n\n\n0\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n2528.0\n1760000.0\n92479.0\n1855007.0\n73500.0\n130056.0\n56.514291\n9706961\n114\n1.17\n\n\n1\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n2.0\n10300.0\nNaN\n10302.0\n483.0\n855.0\n56.514291\n9706961\n114\n1.17\n\n\n2\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCOL\nColombia\nLatin America and the Caribbean\nAmericas\n...\nNaN\n430.0\nNaN\n430.0\nNaN\nNaN\n56.514291\n1141748\n18\n1.58\n\n\n3\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nIDN\nIndonesia\nSouth-eastern Asia\nAsia\n...\n270.0\nNaN\n52500.0\n52770.0\n30000.0\n53084.0\n56.514291\n1904569\n101\n5.30\n\n\n4\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nIDN\nIndonesia\nSouth-eastern Asia\nAsia\n...\n2714.0\n200000.0\n2000.0\n204714.0\n41000.0\n72548.0\n56.514291\n1904569\n101\n5.30\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1127\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nCHN\nChina\nEastern Asia\nAsia\n...\n188.0\n46500.0\nNaN\n46688.0\nNaN\nNaN\nNaN\n9706961\n114\n1.17\n\n\n1128\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nETH\nEthiopia\nSub-Saharan Africa\nAfrica\n...\nNaN\n99000.0\nNaN\n99000.0\nNaN\nNaN\nNaN\n1104300\n10\n0.91\n\n\n1129\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nMMR\nMyanmar\nSouth-eastern Asia\nAsia\n...\n4824.0\n282790.0\nNaN\n287614.0\nNaN\nNaN\nNaN\n676578\n13\n1.92\n\n\n1130\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nTHA\nThailand\nSouth-eastern Asia\nAsia\n...\n37.0\n2313.0\nNaN\n2350.0\nNaN\nNaN\nNaN\n513120\n21\n4.09\n\n\n1131\nNo\nnat-geo-ear-gro\nNatural\nGeophysical\nEarthquake\nGround movement\nTJK\nTajikistan\nCentral Asia\nAsia\n...\nNaN\n145.0\nNaN\n145.0\nNaN\nNaN\nNaN\n143100\n9\n6.29\n\n\n\n\n1132 rows × 32 columns\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default=\"iframe\"\n\nfig = px.scatter(\n    merged_df.query('disaster_count'),\n    x=\"Country\",\n    y=\"disaster_count\",\n    size=\"disasters_normalized_by_size\",\n    color=\"Country\",\n    hover_name=\"Country\",\n    log_y=True, \n    size_max=100,\n    title=\"Number of Disaster Types by Country\"\n)\n\nfig.show()"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#lets-revist-our-first-research-question",
    "href": "posts/Environmental Machine Learning Project/index.html#lets-revist-our-first-research-question",
    "title": "Environmental Data Project",
    "section": "Let’s revist our first research question",
    "text": "Let’s revist our first research question\nNow that we normalized the disaster count by size of the country, we can take a second look at the research question. 1. “Which countries have experienced the highest number of natural disasters?” - We’ll need to investigate variables on countries, when it occured, and type of disaster"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#analysis-of-first-research-question-1",
    "href": "posts/Environmental Machine Learning Project/index.html#analysis-of-first-research-question-1",
    "title": "Environmental Data Project",
    "section": "Analysis of first research question",
    "text": "Analysis of first research question\nFrom this visualization, we can see that Rwanda, El Savador, and the Philippines have experienced the highest number of natural disasters per 100,000 squared km. Comparing this with the original visualization, we can see that there are differences in the coutnries with the highest numebr of natural diasters where we previously found India, China, and the USA noteworthy due to their large size."
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#download-machine-learning-imports",
    "href": "posts/Environmental Machine Learning Project/index.html#download-machine-learning-imports",
    "title": "Environmental Data Project",
    "section": "Download machine learning imports",
    "text": "Download machine learning imports\n\nimport numpy as np\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nimport keras\nimport tensorflow as tf\nkeras.__version__\n\n'3.10.0'"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#choose-dataset-for-machine-learning",
    "href": "posts/Environmental Machine Learning Project/index.html#choose-dataset-for-machine-learning",
    "title": "Environmental Data Project",
    "section": "Choose dataset for machine learning",
    "text": "Choose dataset for machine learning\nOur dataset contains meteorological data on the burned area of forest fires, in the northeast region of Portugal. We can try using FFMC, DMC, DC, and RH indexes to predict the month.\n\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv\"\nfires = pd.read_csv(url)\n\n# Focus on specific data and drop missing rows\ndf = fires[[\"FFMC\", \"DMC\", \"DC\", \"RH\", \"month\"]].dropna()\n# FFMC index from the FWI system: 18.7 to 96.20 \n# DMC index from the FWI system: 1.1 to 291.3   \n# DC index from the FWI system: 7.9 to 860.6    \n# relative humidity: 15.0 to 100\n# month of the year: 'jan' to 'dec'\n\n# Encode the \"month\" column as the target\nle = LabelEncoder()\ny = le.fit_transform(df[\"month\"])\n\n# Predictor data\nX = df[[\"FFMC\", \"DMC\", \"DC\", \"RH\"]]\nX = np.array(X, dtype=np.float32)\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#investigate-data",
    "href": "posts/Environmental Machine Learning Project/index.html#investigate-data",
    "title": "Environmental Data Project",
    "section": "Investigate data",
    "text": "Investigate data\nLet’s look at the shape, as well as the first five rows of the predictor data and the target data.\n\nX_train.shape\n\n(361, 4)\n\n\n\nX_train[:5] # first five rows of predictor data\n\narray([[ 93.3, 141.2, 713.9,  30. ],\n       [ 91.6, 108.4, 764. ,  34. ],\n       [ 91.4, 142.4, 601.4,  60. ],\n       [ 89.7, 287.2, 849.3,  45. ],\n       [ 85.6,  90.4, 609.6,  50. ]], dtype=float32)\n\n\n\ny_train[:5] # first five rows of target data\n\narray([11, 11,  1, 11,  1])\n\n\n\nfrom keras import layers\n\nmodel = keras.models.Sequential([\n    layers.Input((4,)), \n    layers.Dense(500, activation=\"relu\"),\n    layers.Dense(500, activation=\"relu\"),\n    layers.Dense(len(np.unique(y))) \n])\n\n\nmodel.summary()\n\nModel: \"sequential_3\"\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense_6 (Dense)                 │ (None, 500)            │         2,500 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (Dense)                 │ (None, 500)            │       250,500 │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (Dense)                 │ (None, 12)             │         6,012 │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n\n\n\n Total params: 259,012 (1011.77 KB)\n\n\n\n Trainable params: 259,012 (1011.77 KB)\n\n\n\n Non-trainable params: 0 (0.00 B)"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#train-the-data-and-make-predictions",
    "href": "posts/Environmental Machine Learning Project/index.html#train-the-data-and-make-predictions",
    "title": "Environmental Data Project",
    "section": "Train the data and make predictions",
    "text": "Train the data and make predictions\n\nmodel(X_train[:5])\n\n&lt;tf.Tensor: shape=(5, 12), dtype=float32, numpy=\narray([[ 42.231293 , -57.23302  , -19.436283 ,  11.654123 ,  57.185387 ,\n        -30.60973  , -14.511181 ,   1.3403463,  21.98985  ,  35.708992 ,\n         35.96309  , -11.145385 ],\n       [ 43.58406  , -63.74549  , -18.29486  ,  11.017838 ,  58.415565 ,\n        -33.342224 , -17.90144  ,   2.7682953,  23.4479   ,  37.96327  ,\n         33.930916 , -11.333611 ],\n       [ 36.51568  , -44.60419  , -17.930983 ,  10.455878 ,  49.78942  ,\n        -22.441956 , -10.7569275,   0.6952715,  18.246555 ,  30.49959  ,\n         33.84427  , -10.2061615],\n       [ 55.14103  , -58.880413 , -32.353184 ,  13.848793 ,  73.23572  ,\n        -30.394426 , -11.173553 ,  -0.9273424,  31.675098 ,  41.884155 ,\n         55.789963 , -14.880316 ],\n       [ 34.95586  , -49.563198 , -14.744823 ,   9.123985 ,  47.298676 ,\n        -25.18306  , -13.881342 ,   1.8174648,  17.46812  ,  31.066544 ,\n         28.004725 ,  -9.360939 ]], dtype=float32)&gt;\n\n\nWe can apply the softmax layer to transform the data into probabilities.\n\nsoftmax = keras.layers.Softmax()\nsoftmax(model(X_train[:5]))\n\n&lt;tf.Tensor: shape=(5, 12), dtype=float32, numpy=\narray([[3.20272306e-07, 0.00000000e+00, 5.29212149e-34, 1.68276147e-20,\n        9.99999642e-01, 0.00000000e+00, 7.28748781e-32, 5.58222628e-25,\n        5.18527842e-16, 4.70890771e-10, 6.07117967e-10, 2.11019423e-30],\n       [3.62042158e-07, 0.00000000e+00, 4.84267122e-34, 2.60272400e-21,\n        9.99999642e-01, 0.00000000e+00, 7.17707122e-34, 6.80295304e-25,\n        6.51231170e-16, 1.31123357e-09, 2.32515344e-11, 5.10878402e-31],\n       [1.71904014e-06, 0.00000000e+00, 3.88508707e-30, 8.27292365e-18,\n        9.99998212e-01, 4.26885035e-32, 5.07053905e-27, 4.77178150e-22,\n        2.00035318e-14, 4.19306900e-09, 1.18879662e-07, 8.79526137e-27],\n       [1.38540477e-08, 0.00000000e+00, 0.00000000e+00, 1.61653947e-26,\n        1.00000000e+00, 0.00000000e+00, 2.19542843e-37, 6.18572972e-33,\n        8.92179741e-19, 2.42208512e-14, 2.65097029e-08, 0.00000000e+00],\n       [4.36095343e-06, 0.00000000e+00, 1.13461569e-27, 2.63597149e-17,\n        9.99995470e-01, 3.32338290e-32, 2.69063545e-27, 1.76913108e-20,\n        1.10854326e-13, 8.92221550e-08, 4.17581791e-09, 2.47195235e-25]],\n      dtype=float32)&gt;"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#compile-the-model-by-specifying-the-loss-function-and-optimization-algorithm",
    "href": "posts/Environmental Machine Learning Project/index.html#compile-the-model-by-specifying-the-loss-function-and-optimization-algorithm",
    "title": "Environmental Data Project",
    "section": "Compile the model, by specifying the loss function and optimization algorithm",
    "text": "Compile the model, by specifying the loss function and optimization algorithm\n\nloss_fn = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\nmodel.compile(optimizer= \"adam\", loss = loss_fn, metrics=[\"accuracy\"])\n\n\nhistory = model.fit(X_train, y_train, epochs = 20,  verbose=1)\n\nEpoch 1/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.2434 - loss: 34.1651      \nEpoch 2/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.6165 - loss: 16.5051 \nEpoch 3/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.5924 - loss: 9.1298 \nEpoch 4/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.5212 - loss: 4.4254 \nEpoch 5/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.5135 - loss: 5.0484 \nEpoch 6/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.6460 - loss: 3.5812 \nEpoch 7/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.7405 - loss: 1.7344 \nEpoch 8/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.6929 - loss: 1.1567 \nEpoch 9/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.6363 - loss: 1.9620 \nEpoch 10/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.6804 - loss: 2.6098 \nEpoch 11/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.6227 - loss: 3.8614 \nEpoch 12/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.6377 - loss: 3.2357 \nEpoch 13/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.7501 - loss: 1.1757 \nEpoch 14/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.7331 - loss: 1.1214 \nEpoch 15/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.7907 - loss: 0.9560 \nEpoch 16/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.8358 - loss: 0.8908 \nEpoch 17/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.7178 - loss: 0.9575 \nEpoch 18/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.8355 - loss: 0.7106 \nEpoch 19/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.7838 - loss: 0.9411 \nEpoch 20/20\n12/12 ━━━━━━━━━━━━━━━━━━━━ 0s 3ms/step - accuracy: 0.6905 - loss: 1.7983"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#plot-the-progress-of-the-training-over-time",
    "href": "posts/Environmental Machine Learning Project/index.html#plot-the-progress-of-the-training-over-time",
    "title": "Environmental Data Project",
    "section": "Plot the progress of the training over time",
    "text": "Plot the progress of the training over time\n\nfrom matplotlib import pyplot as plt\nplt.plot(history.history[\"accuracy\"])\nplt.gca().set(xlabel=\"epoch\", ylabel=\"training accuracy\")"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#evaluate-the-model-on-our-test-data",
    "href": "posts/Environmental Machine Learning Project/index.html#evaluate-the-model-on-our-test-data",
    "title": "Environmental Data Project",
    "section": "Evaluate the model on our test data",
    "text": "Evaluate the model on our test data\n\nmodel.evaluate(X_test, y_test, verbose=2)\n\n5/5 - 0s - 20ms/step - accuracy: 0.6218 - loss: 3.3451\n\n\n[3.3451032638549805, 0.6217948794364929]"
  },
  {
    "objectID": "posts/Environmental Machine Learning Project/index.html#prediction-probabilities",
    "href": "posts/Environmental Machine Learning Project/index.html#prediction-probabilities",
    "title": "Environmental Data Project",
    "section": "Prediction Probabilities",
    "text": "Prediction Probabilities\n\nmodel(X_train[:5])\n\n&lt;tf.Tensor: shape=(5, 12), dtype=float32, numpy=\narray([[  59.137196,   77.40177 ,   57.148186,   63.81654 , -190.25858 ,\n          73.79172 ,   56.78232 ,   21.58711 ,   30.569883,  -31.501852,\n          45.33556 ,   90.51578 ],\n       [  60.877666,   72.99407 ,   63.311672,   68.24581 , -208.17204 ,\n          70.8057  ,   52.5222  ,   16.234116,   31.925774,  -33.092915,\n          61.714054,   98.89455 ],\n       [  52.503895,   70.10928 ,   49.15378 ,   55.77522 , -154.76253 ,\n          71.33311 ,   57.450928,   25.45481 ,   30.249817,  -28.144045,\n          26.624651,   65.653   ],\n       [  74.70765 ,  113.69686 ,   56.976463,   73.875534, -218.57251 ,\n         103.44394 ,   81.750786,   42.11496 ,   36.228024,  -38.626827,\n          24.670424,  116.86606 ],\n       [  50.41137 ,   59.24165 ,   53.028492,   56.359577, -163.05801 ,\n          61.232952,   47.11843 ,   15.995877,   28.476118,  -27.557047,\n          44.78984 ,   70.02054 ]], dtype=float32)&gt;\n\n\n\nprob_model = keras.models.Sequential([\n    model,\n    layers.Softmax()\n])\n\n\nprob_model(X_train[:5])\n\n&lt;tf.Tensor: shape=(5, 12), dtype=float32, numpy=\narray([[2.3575129e-14, 2.0167806e-06, 3.2258049e-15, 2.5390280e-12,\n        0.0000000e+00, 5.4554693e-08, 2.2374009e-15, 1.1605402e-30,\n        9.2433390e-27, 0.0000000e+00, 2.3904512e-20, 9.9999797e-01],\n       [3.0865887e-17, 5.6437376e-12, 3.5200921e-16, 4.8912907e-14,\n        0.0000000e+00, 6.3265929e-13, 7.2568216e-21, 1.2619176e-36,\n        8.2381834e-30, 0.0000000e+00, 7.1238919e-17, 1.0000000e+00],\n       [5.1222844e-09, 2.2666624e-01, 1.7969175e-10, 1.3495276e-07,\n        0.0000000e+00, 7.7070230e-01, 7.2099590e-07, 9.1663390e-21,\n        1.1082570e-18, 0.0000000e+00, 2.9529091e-20, 2.6305555e-03],\n       [4.7092488e-19, 4.0341433e-02, 9.3841614e-27, 2.0491259e-19,\n        0.0000000e+00, 1.4222104e-06, 5.3919645e-16, 3.2970567e-33,\n        9.1509086e-36, 0.0000000e+00, 0.0000000e+00, 9.5965719e-01],\n       [3.0462832e-09, 2.0831105e-05, 4.1722682e-08, 1.1669282e-06,\n        0.0000000e+00, 1.5258926e-04, 1.1315282e-10, 3.4459704e-24,\n        9.0659336e-19, 0.0000000e+00, 1.1024818e-11, 9.9982542e-01]],\n      dtype=float32)&gt;\n\n\n\npredictions = prob_model.predict(X_test).argmax(axis = 1)\npredictions\n\n5/5 ━━━━━━━━━━━━━━━━━━━━ 0s 6ms/step \n\n\narray([ 3,  1,  6,  5,  3, 11, 11,  7, 11, 11, 11, 11,  7,  6,  5, 11, 11,\n        1, 11,  5,  5,  2, 11, 11, 11, 11,  1, 11, 11,  5,  5,  5,  1, 11,\n       11,  7,  5, 11,  3, 11, 11,  7,  1, 11,  6, 11, 11, 11,  5,  5,  5,\n        3, 11, 11, 11,  3,  5,  7, 11, 11, 11, 11,  7, 11,  5,  5, 11,  3,\n        5, 11,  7,  1,  5,  7, 11,  5,  5,  1, 11,  1, 11,  3,  6, 11, 11,\n        7,  8, 11, 11,  3,  5,  1,  8, 11,  5, 11, 11,  5, 11, 11, 11, 11,\n        5, 11,  5, 11,  5, 11,  5,  8, 11, 11,  1, 11,  5,  7,  8,  7, 11,\n        5, 11,  1,  3,  3,  3,  1,  5, 11,  1,  5,  1,  7,  5, 11, 11, 11,\n       11,  5, 11, 11, 11,  5, 11, 11,  3, 11,  6,  1, 11,  5, 11, 11, 11,\n       11, 11,  7])\n\n\n\n[le.classes_[predictions[i]] for i in range(10)]\n\n['feb', 'aug', 'jun', 'jul', 'feb', 'sep', 'sep', 'mar', 'sep', 'sep']"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mlresearch",
    "section": "",
    "text": "Environmental Data Project\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2025\n\n\nMegan Tieu\n\n\n\n\n\n\nNo matching items"
  }
]